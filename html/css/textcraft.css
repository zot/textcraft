/* Copyright (c) 2020, William R. Burdick Jr., Roy Riggs, and TEAM CTHLUHU
 *
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#logo {
    display: grid;
    grid: auto / 50fr auto 50fr;
    align-items: flex-end;
}
body {
	background-color: #333333;
	/* background-image: linear-gradient(#666666, #aaaaaa); */
	font-family: Verdana, Geneva, sans-serif;
	font-size: 24px;
	color: #dddddd;
    display: flex;
    flex-direction: column;
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    user-select: none;
}
/* STATES
 * State classes are on the body, the lowercased state name suffixed with capitalized state type
 *   example: notstartedNat
 * Associated selector classes are on elements to control whether they are hidden: when-statetype-state or when-not-statetype-state
 *   examples: when-nat-notstarted, when-relay-guest
 *
 * nat
 *   State classes on body: .notstartedNat, .unknownNat, .publicNat, .privateNat
 *   selector classes on e
 *
 */
.hidden,
/* user */
body:not(.hasuser) .when-connected-with-user,
body.hasuser.privateNat .when-not-connected-with-user,
body.hasuser.publicNat .when-not-connected-with-user,
/* nat */
body:not(.notstartedNat) .when-nat-notstarted,
body:not(.unknownNat) .when-nat-unknown,
body:not(.privateNat) .when-nat-private,
body:not(.publicNat) .when-nat-public,
body.notstartedNat .when-connected-with-user,
body.notstartedNat .when-nat-known,
body.privateNat .when-nat-notknown,
body.privateNat .when-nat-public,
body.publicNat .when-nat-notknown,
body.publicNat .when-nat-private,
body.unknownNat .when-connected-with-user,
body.unknownNat .when-nat-known,
/* role */
body:not(.noneRole) .when-role-none,
body:not(.hostRole) .when-role-host,
body:not(.guestRole) .when-role-guest,
body:not(.relayRole) .when-role-relay,
body:not(.relayRole):not(.guestRole) .when-role-player,
body:not(.soloRole) .when-role-solo,
body.noneRole .when-not-role-none,
body.hostRole .when-not-role-host,
body.guestRole .when-not-role-guest,
body.relayRole .when-not-role-relay,
body.soloRole .when-not-role-solo,
/* peer */
body:not(.emulation) #stateButtons > *,
body:not(.disconnectedPeer) .when-peer-disconnected,
body:not(.abortingrelayhostingPeer) .when-peer-abortingrelayhosting,
body:not(.abortingrelayconnectionPeer) .when-peer-abortingrelayconnection,
body:not(.stoppinghostingPeer) .when-peer-stoppinghosting,
body:not(.disconnectingfromhostPeer) .when-peer-disconnectingfromhost,
body:not(.disconnectingfromrelayforhostingPeer) .when-peer-disconnectingfromrelayforhosting,
body:not(.disconnectingfromrelayforconnectionPeer) .when-peer-disconnectingfromrelayforconnection,
body:not(.connectingtohostPeer) .when-peer-connectingtohost,
body:not(.connectingtorelayforhostingPeer) .when-peer-connectingtorelayforhosting,
body:not(.connectingtorelayforconnectionPeer) .when-peer-connectingtorelayforconnection,
body:not(.connectingtorelayforcallbackPeer) .when-peer-connectingtorelayforcallback,
body:not(.awaitingtokenconnectionPeer) .when-peer-awaitingtokenconnection,
body:not(.awaitingtokenPeer) .when-peer-awaitingtoken,
body:not(.connectedtohostPeer) .when-peer-connectedtohost,
body:not(.hostingdirectlyPeer) .when-peer-hostingdirectly,
body:not(.connectedtorelayforhostingPeer) .when-peer-connectedtorelayforhosting,
body:not(.connectedtorelayforconnectionPeer) .when-peer-connectedtorelayforconnection,
body.disconnectedPeer .when-not-peer-disconnected,
/* relay */
body:not(.idleRelay) .when-relay-idle,
body:not(.pendinghostingRelay) .when-relay-pendinghosting,
body:not(.hostingRelay) .when-relay-hosting,
body.idleRelay .when-not-relay-idle,
body.hostingRelay .when-not-relay-hosting,
/* section */
body:not(.connectionSection) .when-section-connection,
body:not(.mudSection) .when-section-mud,
body:not(.profileSection) .when-section-profile,
body:not(.storageSection) .when-section-storage,
/* mud editor */
.dialog:not(.mud-deleted) .when-mud-deleted
{
    display: none;
}
#stateButtons > * > span {
    font-weight: bold;
    color: yellow;
}
body:not(.emulation) #toggleStateButtons {
    display: initial;
    vertical-align: middle;
}
#indicators {
    position: fixed;
    right: 0;
    top: 0;
    white-space: nowrap;
    display: flex;
}
#indicator-box {
    display: flex;
    border: white solid 2px;
    border-radius: 5px;
    align-items: center;
}
#toggleStateButtons {
    vertical-align: middle;
}
#onlineIndicator {
    width: 24px;
    vertical-align: middle;
}
.field {
    display: flex;
    white-space: nowrap;
}
.field > input,
.field > .grow {
    flex-grow: 1;
}
.section {
    flex-grow: 1;
    position: relative;
}
.view {
    /*border: solid red 2px;*/
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
}
#mudView {
    display: flex;
    flex-direction: column;
}
#mud-output {
    flex-grow: 1;
    resize: none;
    background: white;
    color: black;
    overflow-x: auto;
    overflow-y: scroll;
    user-select: text;
}
#mud-command {
}
#profileView {
}
.fcolumn,
#storageView,
#storage-list {
    display: flex;
    flex-direction: column;
}
#storage-list {
    align-items: flex-start;
    flex-grow: 1;
    border: solid white 2px;
    border-radius: 5px;
    overflow: scroll;
    overflow-x: auto;
}
#templates,
#parsing {
    display: none;
}
.fgrow {
    flex-grow: 1;
}
.fslim {
    flex-grow: 0;
}
.mud-view {
    display: flex;
    align-items: center;
    background: darkorange;
    border: solid black 2px;
    border-radius: 5px;
    padding-left: 0.5ex;
    padding-right: 0.5ex;
}
.mud-view [name=name] {
    flex-grow: 1;
    font-weight: bold;
}
[name=mud-user-list] {
    height: 10em;
    border: solid white 2px;
    border-radius: 5px;
    padding-left: 0.5ex;
    padding-right: 0.5ex;
    overflow: scroll;
    overflow-x: auto;
}
.naked-button {
    padding-left: 1;
    padding-right: 1;
    border: none;
    background: none;
}
.fcenter {
    display: flex;
    align-items: center;
}
.fzero {
    flex-basis: 0;
}
#gui-mode,
.section-bar {
    display: flex;
    align-items: center;
    flex-grow: 1;
    font-weight: bold;
    font-size: 1.25em;
    color: orange;
}
.mud-edit-top {
    background: orange;
    padding: 0.2ex;
    border-radius: 5px;
}
.white {
    color: #dddddd;
}
.mode-label {
    font-weight: bold;
    color: cyan;
}
.input {
    color: orange;
    font-style: italic;
}
.error {
    color: red;
    font-weight: bold;
}
.left {
    float: left;
}
.right {
    float: right;
}
.h100 {
    height: 100%;
}
.dialog {
    position: absolute;
    left: 3ex;
    right: 3ex;
    top: 4em;
    /*bottom: 3ex;*/
    border: green solid 3px;
    border-radius: 5px;
    background: black;
}
#sections {
    display: flex;
    flex-grow: 1;
    position: relative;
}
